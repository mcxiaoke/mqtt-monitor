{"version":3,"sources":["utils/store.js","utils/utils.js","context/AppContext.js","components/MessageList.js","components/ConnectForm.js","components/widgets.js","components/SubscribeForm.js","components/PublishForm.js","components/HeaderActions.js","App.js","serviceWorker.js","index.js"],"names":["storeSet","key","obj","window","localStorage","setItem","JSON","stringify","storeGet","s","getItem","parse","undefined","MySwal","withReactContent","Swal","toastInfo","title","message","timeout","fire","icon","text","toast","position","timer","toastError","React","createContext","isConnected","options","topics","Set","CreatedAt","ts","format","unix","NewBadge","index","Badge","pill","variant","MessageItem","item","length","ListGroup","Item","Media","Body","className","topic","props","messages","useContext","AppContext","listItems","map","Fragment","ConnectButton","Button","type","ctx","AppContxt","useState","setOptions","handleChange","e","target","name","value","Object","assign","Form","onSubmit","preventDefault","fixedOptions","host","username","password","onConnectFormSubmit","Row","Group","as","Col","xs","md","lg","Control","disabled","onChange","placeholder","TopicInfo","onTopicClick","handleClick","textContent","tps","onClick","size","topicInput1","useRef","topicInput2","handleClick1","subscribe","current","console","log","onSubscribeFormSubmit","handleClick2","handleKeyUp","sm","onKeyUp","ref","topicInput","messageInput","callback","err","isValid","onPublishFormSubmit","Accordion","defaultActiveKey","Card","Toggle","Header","eventKey","Collapse","ConnectForm","SubscribeForm","PublishForm","MQTT_OPTIONS","DEFAULT_TOPICS","App","onClearClick","setState","state","client","end","connect","theTopics","split","unsubscribe","includes","publish","store","needReconnect","this","showClearButton","clsNames","Provider","Container","HeaderActions","MessageList","inTopics","prototype","toString","call","Symbol","iterator","isIterable","it","trim","filter","Boolean","cleanTopics","error","newTopics","forEach","el","delete","granted","opts","connected","now","moment","connectOpts","reconnectPeriod","clientId","Date","toJSON","slice","replaceAll","mqtt","on","onConnected","stream","Math","round","startsWith","Component","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9e65e74.chunk.js","sourcesContent":["export const storeSet = (key, obj) => {\n  window.localStorage.setItem(\"mqtt_store_item_\" + key, JSON.stringify(obj));\n};\n\nexport const storeClear = () => {\n  window.localStorage.clear();\n};\n\nexport const storeGet = (key) => {\n  let s = window.localStorage.getItem(\"mqtt_store_item_\" + key);\n  return s ? JSON.parse(s) : undefined;\n};\n\nexport const storeDelete = (key) => {\n  window.localStorage.removeItem(\"mqtt_store_item_\" + key);\n};\n\nexport const saveMessages = (host, messages) => {\n  storeSet(host + \"_messages\", messages);\n};\n\nexport const loadMessages = (host) => {\n  return storeGet(host + \"_messages\") || [];\n};\n\nexport const deleteMessages = (host) => {\n  storeDelete(host + \"_messages\");\n};\n","import Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nconst MySwal = withReactContent(Swal);\n// https://www.npmjs.com/package/sweetalert2\n// eslint-disable-next-line no-unused-vars\nexport const toastInfo = (title, message, timeout) => {\n  MySwal.fire({\n    icon: \"success\",\n    title: title,\n    text: message,\n    toast: true,\n    position: \"bottom\",\n    timer: timeout || 3000\n  });\n};\n\nexport const toastError = (title, message, timeout) => {\n  MySwal.fire({\n    icon: \"error\",\n    title: title,\n    text: message,\n    toast: true,\n    position: \"center\",\n    timer: timeout || 5000\n  });\n};\n\nexport const isIterable = function(obj) {\n  // checks for null and undefined\n  if (obj == null) {\n    return false;\n  }\n  return typeof obj[Symbol.iterator] === \"function\";\n};\n\nexport const isString = function(obj) {\n  return Object.prototype.toString.call(obj) === \"[object String]\";\n};\n","import React from \"react\";\n\nexport default React.createContext({\n  isConnected: false,\n  options: {},\n  topics: new Set()\n});\n","import React, { useContext } from \"react\";\nimport Moment from \"react-moment\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Media from \"react-bootstrap/Media\";\nimport Badge from \"react-bootstrap/Badge\";\nimport AppContext from \"../context/AppContext\";\n\nconst CreatedAt = ({ ts }) => {\n  return (\n    <small>\n      <Moment format=\"YYYY-MM-DD HH:mm:ss\" unix>\n        {ts}\n      </Moment>{\" \"}\n    </small>\n  );\n};\n\nconst NewBadge = index => {\n  return index === 0 ? (\n    <Badge pill variant=\"danger\">\n      New!\n    </Badge>\n  ) : null;\n};\n\nconst MessageItem = ({ item, index, length }) => {\n  //   const message = item.message.split(\"\\n\").map((i, k) => {\n  //     return (\n  //       <span key={k}>\n  //         {i}\n  //         <br />\n  //       </span>\n  //     );\n  //   });\n  return (\n    <ListGroup.Item>\n      <Media>\n        <Media.Body>\n          <strong className=\"text-primary\">{item.topic}: </strong>\n          <span className=\"text-secondary\">{item.message}</span>\n          <small className=\"pl-2\">({length - index})</small>\n          <span className=\"pl-2\">\n            <CreatedAt ts={item.ts} />\n          </span>\n          <span className=\"pl-2\">\n            <NewBadge index={index} />\n          </span>\n        </Media.Body>\n      </Media>\n    </ListGroup.Item>\n  );\n};\n\nexport default props => {\n  const { messages } = useContext(AppContext);\n  const listItems = messages.map((item, index) => (\n    <React.Fragment key={\"item_\" + index}>\n      <MessageItem item={item} index={index} length={messages.length} />\n    </React.Fragment>\n  ));\n  return <ListGroup variant=\"flush\">{listItems}</ListGroup>;\n};\n","import React, { useState, useContext } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport AppContxt from \"../context/AppContext\";\n\nconst ConnectButton = ({ isConnected }) => {\n  return isConnected ? (\n    <Button className=\"btn-block\" variant=\"danger\" type=\"submit\">\n      Disconnect\n    </Button>\n  ) : (\n    <Button className=\"btn-block\" variant=\"primary\" type=\"submit\">\n      Connect\n    </Button>\n  );\n};\n\nexport default (props) => {\n  const ctx = useContext(AppContxt);\n  const { isConnected } = ctx;\n  const [options, setOptions] = useState(ctx.options);\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setOptions(Object.assign({}, options, { [name]: value }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // empty username not equal to no username\n    const fixedOptions = {\n      host: options.host,\n      username: options.username || null,\n      password: options.password || null\n    };\n    // console.log(\"ConnectForm.handleSubmit \", fixedOptions);\n    fixedOptions.host && props.onConnectFormSubmit && props.onConnectFormSubmit(fixedOptions);\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Row>\n        <Form.Group as={Col} xs={12} md={4} lg={4}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"host\"\n            type=\"text\"\n            value={options.host}\n            placeholder=\"ws://test.mosquitto.org:8080\"\n          />\n        </Form.Group>\n        <Form.Group as={Col} xs={6} md={3} lg={3}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"username\"\n            type=\"text\"\n            value={options.username}\n            placeholder=\"Username\"\n          />\n        </Form.Group>\n        <Form.Group as={Col} xs={6} md={2} lg={3}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"password\"\n            type=\"password\"\n            value={options.password}\n            placeholder=\"Password\"\n          />\n        </Form.Group>\n        <Col xs={12} md={3} lg={2}>\n          <ConnectButton isConnected={isConnected} />\n        </Col>\n      </Form.Row>\n    </Form>\n  );\n};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport const TopicInfo = ({ topics, onTopicClick }) => {\n  const handleClick = (e) => {\n    onTopicClick && onTopicClick(e.target.textContent);\n  };\n  const tps = [...topics].map((text) => {\n    return (\n      <CopyToClipboard key={text} text={text}>\n        <Button onClick={handleClick} variant=\"outline-success\" className=\"mr-2\" size=\"sm\">\n          {text}\n        </Button>\n      </CopyToClipboard>\n    );\n  });\n  return (\n    <p className=\"m-0 p-0\">\n      <strong>Subscribed Topics:</strong>\n      {tps}\n    </p>\n  );\n};\n\nexport const SimpleInfo = ({ name, value }) => {\n  return (\n    <p className=\"m-0 p-0\">\n      <strong>{name}</strong>\n      <span className=\"text-success\">{value}</span>\n    </p>\n  );\n};","import React, { useRef, useContext } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport AppContxt from \"../context/AppContext\";\nimport { TopicInfo } from \"./widgets\";\n\nexport default (props) => {\n  const { isConnected, topics } = useContext(AppContxt);\n  const topicInput1 = useRef(null);\n  const topicInput2 = useRef(null);\n\n  const handleClick1 = (e) => {\n    const options = {\n      subscribe: true,\n      topics: topicInput1.current.value\n    };\n    console.log(\"SubscribeForm.handleClick1 \", options);\n    options.topics && props.onSubscribeFormSubmit && props.onSubscribeFormSubmit(options);\n    topicInput1.current.value = \"\";\n  };\n\n  const handleClick2 = (e) => {\n    const options = {\n      subscribe: false,\n      topics: topicInput2.current.value\n    };\n    console.log(\"SubscribeForm.handleClick2 \", options);\n    options.topics && props.onSubscribeFormSubmit && props.onSubscribeFormSubmit(options);\n    topicInput2.current.value = \"\";\n  };\n\n  // Pressing the enter key triggers the click handler of the first type=\"submit\" button\n  // https://dzello.com/blog/2017/02/19/demystifying-enter-key-submission-for-react-forms/\n  const handleKeyUp = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      if (e.target === topicInput1.current) {\n        handleClick1(null);\n      } else if (e.target === topicInput2.current) {\n        handleClick2(null);\n      }\n    }\n  };\n\n  const onTopicClick = (topic) => {\n    console.log(\"onTopicClick\", topic);\n    topicInput2.current.value = topic;\n  };\n\n  return (\n    <React.Fragment>\n      <Form>\n        <Form.Row className=\"align-items-center\">\n          <Col as={Col} sm={6} md={3} className=\"mb-3 mt-3\">\n            <Form.Control\n              onKeyUp={handleKeyUp}\n              ref={topicInput1}\n              name=\"subscribe-topics\"\n              type=\"text\"\n              placeholder=\"topic/test\"\n            />\n          </Col>\n          <Col sm={6} md={3}>\n            <Button\n              className=\"btn-block\"\n              name=\"subscribe\"\n              variant=\"primary\"\n              type=\"button\"\n              disabled={!isConnected}\n              onClick={handleClick1}\n            >\n              Subscribe\n            </Button>\n          </Col>\n          <Col sm={6} md={3} className=\"mb-3 mt-3\">\n            <Form.Control\n              onKeyUp={handleKeyUp}\n              ref={topicInput2}\n              name=\"unsubscribe-topics\"\n              type=\"text\"\n              placeholder=\"topic/test\"\n            />\n          </Col>\n          <Col sm={6} md={3}>\n            <Button\n              className=\"btn-block\"\n              name=\"unsubscribe\"\n              variant=\"danger\"\n              type=\"button\"\n              disabled={!isConnected}\n              onClick={handleClick2}\n            >\n              Unsubscibe\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n      <TopicInfo topics={topics} onTopicClick={onTopicClick} />\n    </React.Fragment>\n  );\n};\n","import React, { useRef, useContext } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport AppContxt from \"../context/AppContext\";\nimport { TopicInfo } from \"./widgets\";\n\nexport default (props) => {\n  const { isConnected, topics } = useContext(AppContxt);\n  const topicInput = useRef(null);\n  const messageInput = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const options = {\n      topic: topicInput.current.value,\n      message: messageInput.current.value,\n      callback: (err) => {\n        if (!err) {\n          messageInput.current.value = \"\";\n        }\n      },\n      isValid: () => {\n        return options.topic && options.message;\n      }\n    };\n    // console.log(\"PublishForm.handleSubmit \", options);\n    options.isValid() && props.onPublishFormSubmit && props.onPublishFormSubmit(options);\n  };\n\n  const onTopicClick = (topic) => {\n    console.log(\"onTopicClick\", topic);\n    topicInput.current.value = topic;\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Form.Row>\n          <Form.Group as={Col} xs={12} md={3}>\n            <Form.Control ref={topicInput} name=\"publish-topic\" type=\"text\" placeholder=\"topic name\" />\n          </Form.Group>\n          <Form.Group as={Col} xs={12} md={7}>\n            <Form.Control ref={messageInput} name=\"publish-message\" type=\"text\" placeholder=\"message content\" />\n          </Form.Group>\n          <Col xs={12} md={2}>\n            <Button className=\"btn-block\" name=\"publish\" variant=\"primary\" type=\"submit\" disabled={!isConnected}>\n              Publish\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n      <TopicInfo topics={topics} onTopicClick={onTopicClick} />\n    </>\n  );\n};\n\n// https://zacjones.io/handle-multiple-inputs-in-react-with-hooks\n// first approach, useState\n// need: onChange= ()=>{setServer}\n// use: user\n//   const [server, setServer] = useState(\"\");\n//   const [user, setUser] = useState(\"\");\n//   const [pass, setPass] = useState(\"\");\n// second approach, useRef\n// need: ref={serverInput}\n// use: serverInput.current.value\n//   const serverInput = useRef(null);\n//   const userInput = useRef(null);\n//   const passInput = useRef(null);\n// third approach\n// use callback function\n// need: onFormChange\n// use: onFormChnage(e){ e.target.name, e.target.value }\n// fourth approach\n// use useReducer\n// fix https://stackoverflow.com/questions/47012169/\n//   let extraOpts = props.isConnected ? { disabled: \"disabled\" } : {};\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport ConnectForm from \"./ConnectForm\";\nimport SubscribeForm from \"./SubscribeForm\";\nimport PublishForm from \"./PublishForm\";\n\n// onFormSubmit={this.onFormSubmit}\n// isConnected={this.state.isConnected}\n// options={this.state.options}\n// eslint-disable-next-line\nfunction FormCard(props) {\n  return (\n    <Card>\n      <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey={props.index}>\n        <span className=\"text-white\">{props.title}</span>\n      </Accordion.Toggle>\n      <Accordion.Collapse eventKey={props.index}>\n        <Card.Body>{props.children}</Card.Body>\n      </Accordion.Collapse>\n    </Card>\n  );\n}\n\nexport default (props) => {\n  return (\n    <Accordion defaultActiveKey=\"0\" className=\"w-100\">\n      {/* Connect Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"0\">\n          <span className=\"text-white\"> Connect Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Body>\n            <ConnectForm onConnectFormSubmit={props.onConnectFormSubmit} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      {/* Subscribe Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"1\">\n          <span className=\"text-white\"> Subscribe Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"1\">\n          <Card.Body>\n            <SubscribeForm onSubscribeFormSubmit={props.onSubscribeFormSubmit} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      {/* Publish Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"2\">\n          <span className=\"text-white\"> Publish Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"2\">\n          <Card.Body>\n            <PublishForm onPublishFormSubmit={props.onPublishFormSubmit} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n};\n","import React from \"react\";\nimport mqtt from \"mqtt\";\nimport * as store from \"./utils/store\";\nimport { isIterable, isString, toastInfo, toastError } from \"./utils/utils\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport moment from \"moment\";\nimport AppContext from \"./context/AppContext\";\nimport MessageList from \"./components/MessageList\";\nimport HeaderActions from \"./components/HeaderActions\";\nimport Button from \"react-bootstrap/Button\";\n\nconst MQTT_OPTIONS = {\n  host: \"ws://test.mosquitto.org:8080\",\n  username: null,\n  password: null\n};\n\nconst DEFAULT_TOPICS = new Set([\"test/#\", \"monitor/#\", \"device/#\"]);\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    const options = store.storeGet(\"options\") || MQTT_OPTIONS;\n    this.state = {\n      isConnected: false,\n      needReconnect: true,\n      options: options,\n      topics: new Set(),\n      messages: []\n    };\n  }\n\n  render() {\n    const { messages, isConnected } = this.state;\n    const showClearButton = messages && messages.length > 0;\n    const clsNames = isConnected ? \"p-2 text-primary\" : \"p-2 text-secondary\";\n    return (\n      <AppContext.Provider value={this.state}>\n        <Container>\n          <Row className=\"justify-content-center\">\n            <h2 className={clsNames} as={Col}>\n              MQTT Web Client\n            </h2>\n          </Row>\n          <Row>\n            <HeaderActions\n              onConnectFormSubmit={this.onConnectFormSubmit}\n              onSubscribeFormSubmit={this.onSubscribeFormSubmit}\n              onPublishFormSubmit={this.onPublishFormSubmit}\n            />\n          </Row>\n          <Row className=\"m-3\">\n            <h4 as={Col}>Received Messages</h4>\n          </Row>\n          <Row>\n            <MessageList />\n          </Row>\n          <Row className=\"justify-content-end p-3\">\n            {showClearButton ? (\n              <Button\n                as={Col}\n                md={3}\n                lg={2}\n                onClick={this.onClearClick}\n                variant=\"outline-dark\"\n              >\n                Clear Messages\n              </Button>\n            ) : null}\n          </Row>\n        </Container>\n      </AppContext.Provider>\n    );\n  }\n\n  onClearClick = () => {\n    this.setState({ messages: [] });\n  };\n\n  onConnectFormSubmit = options => {\n    console.log(\"onConnectFormSubmit \", options);\n    if (this.state.isConnected) {\n      this.client.end();\n    } else {\n      if (options && options.host) {\n        this.connect(options);\n        // this.setState({ options: options }, () => {\n        //   this.checkConnect();\n        // });\n      }\n    }\n  };\n\n  onSubscribeFormSubmit = options => {\n    console.log(\"onSubscribeFormSubmit \", options);\n    const { subscribe, topics } = options;\n    if (this.state.isConnected && topics) {\n      const theTopics = topics.split(\" \");\n      if (subscribe) {\n        this.subscribe(theTopics);\n      } else {\n        this.unsubscribe(theTopics);\n      }\n    }\n  };\n\n  onPublishFormSubmit = options => {\n    console.log(\"onPublishFormFormSubmit \", options);\n    const { topic, message } = options;\n    if (topic.includes(\"#\") || topic.includes(\"*\")) {\n      toastError(\"Invalid Topics\", \"Can not publish to wildcard topics\");\n      return;\n    }\n    if (this.state.isConnected && topic && message) {\n      this.publish(topic, message, options.callback);\n    }\n  };\n\n  cleanTopics(inTopics) {\n    let topics;\n    if (isString(inTopics)) {\n      topics = inTopics.split(\" \");\n    } else if (isIterable(inTopics)) {\n      topics = inTopics;\n    } else {\n      topics = inTopics;\n    }\n    return [...topics].map(it => it.trim()).filter(Boolean);\n  }\n\n  publish(topic, message, callback) {\n    console.log(\"publish\", topic, message);\n    this.client.publish(topic, message, err => {\n      if (!err) {\n        console.log(\"published:\", topic, message);\n        toastInfo(\"Message Sent\", \"message is sent to \" + topic);\n      } else {\n        console.log(\"publish fail:\", err);\n      }\n      callback && callback(err);\n    });\n  }\n\n  unsubscribe(inTopics, callback) {\n    const topics = this.cleanTopics(inTopics);\n    console.log(\"unsubscribe to\", topics);\n    this.client.unsubscribe(topics, err => {\n      if (!err) {\n        console.log(\"unsubscribed to\", topics);\n        const newTopics = this.state.topics;\n        topics.forEach(el => {\n          newTopics.delete(el);\n        });\n        this.setState({ topics: newTopics });\n      } else {\n        console.error(\"unsubscribe fail:\", err);\n      }\n      callback && callback(err);\n    });\n  }\n\n  subscribe(inTopics, callback) {\n    const topics = this.cleanTopics(inTopics);\n    console.log(\"subscribe to\", topics);\n    this.client.subscribe(topics, null, (err, granted) => {\n      if (!err) {\n        console.log(\"subscribed to\", granted);\n        this.setState({ topics: new Set([...topics, ...this.state.topics]) });\n        toastInfo(\"Subscribe Success\", \"subscribed topics: \" + topics);\n      } else {\n        console.error(\"subscribe fail:\", err);\n        toastError(\"Subscribe Failed\", err);\n      }\n      callback && callback(err, granted);\n    });\n  }\n\n  disconnect() {\n    this.state.isConnected &&\n      this.client.end(() => {\n        console.log(\"disconnect end\");\n      });\n  }\n\n  onConnected(opts) {\n    console.log(\"connected to\", opts);\n    toastInfo(\"MQTT Connected!\", \"server is \" + opts.host);\n    store.storeSet(\"options\", opts);\n    this.setState(\n      {\n        isConnected: this.client.connected,\n        options: opts,\n        messages: []\n      },\n      () => {\n        let topics;\n        if (this.state.topics && this.state.topics.length > 0) {\n          topics = this.state.topics;\n        } else {\n          topics = DEFAULT_TOPICS;\n        }\n        this.subscribe(topics, err => {\n          if (!err) {\n            const now = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n            this.client.publish(\"device/online\", `Web Monitor online at ${now}!`);\n          }\n        });\n      }\n    );\n  }\n\n  connect(opts) {\n    let dateStr = new Date().toJSON().slice(0, 10).replaceAll('-', '');\n    const connectOpts = { ...opts, reconnectPeriod: 120 * 1000, clientId: 'web_monitor_' + dateStr };\n    console.log(\"connecting with\", connectOpts);\n    this.client = mqtt.connect(opts.host, connectOpts);\n    this.client.on(\"connect\", () => {\n      this.onConnected(connectOpts);\n    });\n    this.client.on(\"disconnect\", () => {\n      console.log(\"disconnect\");\n      this.setState({ isConnected: this.client.connected });\n      toastError(\n        \"Connection Lost!\",\n        \"Lost connection from \" + connectOpts.host\n      );\n    });\n    this.client.on(\"reconnect\", () => {\n      console.log(\"reconnect\");\n    });\n    this.client.on(\"offline\", () => {\n      console.log(\"offline\");\n    });\n    this.client.on(\"close\", () => {\n      console.log(\"close\");\n      this.setState({ isConnected: this.client.connected });\n    });\n    this.client.on(\"error\", err => {\n      console.log(\"Ooops\", \"Something is wrong!\", err);\n      this.setState({ isConnected: this.client.connected });\n    });\n    this.client.stream.on(\"error\", err => {\n      console.error(\"Connection error:\", err);\n      toastError(\n        \"Connection Error!\",\n        \"Failed to connect to \" + connectOpts.host\n      );\n    });\n    this.client.on(\"message\", (topic, message) => {\n      //   toastInfo(\"New Message\", message.toString() + \" (\" + topic + \")\");\n      this.setState({\n        messages: [\n          {\n            ts: Math.round(Date.now() / 1000),\n            topic: topic,\n            message: message.toString()\n          },\n          ...this.state.messages\n        ]\n      });\n    });\n  }\n\n  checkConnect() {\n    const options = this.state.options;\n    options.host && options.host.startsWith(\"ws\") && this.connect(options);\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\", this.state.options);\n  }\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount\");\n    if (this.state.isConnected) {\n      store.storeSet(\"options\", this.state.options);\n    }\n    // store.saveMessages(this.state.options.host, this.state.messages);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@sweetalert2/theme-bootstrap-4/bootstrap-4.css';\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}