{"version":3,"sources":["utils/store.js","utils/utils.js","context.js","components/form_connect.js","components/form_subscribe.js","components/form_publish.js","components/action_cards.js","App.js","serviceWorker.js","index.js"],"names":["storeSet","key","obj","window","localStorage","setItem","JSON","stringify","storeGet","s","getItem","parse","undefined","isIterable","Symbol","iterator","isString","Object","prototype","toString","call","AppContext","React","createContext","isConnected","options","topics","Set","ConnectForm","props","context","useContext","AppContxt","useState","host","username","password","setOptions","handleChange","e","target","name","value","newOptions","assign","Form","id","onSubmit","preventDefault","console","log","fixedOptions","onConnectFormSubmit","Row","Group","as","Col","controlId","xs","md","Control","disabled","onChange","type","placeholder","Button","className","variant","SubscribeForm","ctx","topicInput1","useRef","topicInput2","Fragment","sm","ref","onClick","subscribe","current","onSubscribeFormSubmit","join","renderInfoBar","PublishForm","topicInput","messageInput","topic","message","callback","err","onPublishFormSubmit","HeaderActionCards","Accordion","defaultActiveKey","Card","Toggle","Header","eventKey","Collapse","Body","DEFAULT_OPTIONS","App","renderNewBadge","index","Badge","pill","renderCreatedAt","ts","format","renderItems","items","state","messages","listItems","map","item","ListGroup","Item","Media","length","client","end","connect","theTopics","split","unsubscribe","publish","store","Provider","this","Container","inTopics","it","trim","filter","Boolean","cleanTopics","error","newTopics","forEach","el","delete","setState","granted","opts","mqtt","on","connected","now","moment","packet","Date","startsWith","Component","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4gBAAe,GACbA,SAAU,SAASC,EAAKC,GACtBC,OAAOC,aAAaC,QAAQ,mBAAqBJ,EAAKK,KAAKC,UAAUL,KAEvEM,SAAU,SAASP,GACjB,IAAIQ,EAAIN,OAAOC,aAAaM,QAAQ,mBAAqBT,GACzD,OAAOQ,EAAIH,KAAKK,MAAMF,QAAKG,ICNlBC,EAAa,SAASX,GAEjC,OAAW,MAAPA,GAGmC,oBAAzBA,EAAIY,OAAOC,WAGdC,EAAW,SAASd,GAC/B,MAA+C,oBAAxCe,OAAOC,UAAUC,SAASC,KAAKlB,I,kECP3BmB,EAAaC,IAAMC,cAAc,CAC5CC,aAAa,EACbC,QAAS,GACTC,OAAQ,IAAIC,MAGCN,I,wCCiFAO,EAnFK,SAACC,EAAOC,GAAa,IAChCN,EAAeO,qBAAWC,GAA1BR,YAD+B,EAERS,mBAAS,CACrCC,KAAML,EAAMJ,QAAQS,MAAQ,GAC5BC,SAAUN,EAAMJ,QAAQU,UAAY,GACpCC,SAAUP,EAAMJ,QAAQW,UAAY,KALA,mBAE/BX,EAF+B,KAEtBY,EAFsB,KAQhCC,EAAe,SAACC,GAAO,IAAD,EACFA,EAAEC,OAAlBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MAERC,EAAa1B,OAAO2B,OAAO,GAAInB,GAErCkB,EAAWF,GAAQC,EACnBL,EAAWM,IA4Bb,OACE,kBAACE,EAAA,EAAD,CAAMC,GAAG,eAAeC,SA1BL,SAACR,GACpBA,EAAES,iBACFC,QAAQC,IAAI,gBAAiBX,EAAEC,QAE/B,IAAMW,EAAe,CACnBjB,KAAMT,EAAQS,KACdC,SAAUV,EAAQU,UAAY,KAC9BC,SAAUX,EAAQW,UAAY,MAEhCa,QAAQC,IAAI,4BAA6BC,GACzCtB,EAAMuB,qBAAuBvB,EAAMuB,oBAAoBD,KAiBrD,kBAACN,EAAA,EAAKQ,IAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYC,GAAIC,IAAKC,UAAU,OAAOC,GAAI,GAAIC,GAAI,GAChD,kBAACd,EAAA,EAAKe,QAAN,CACEC,SAAUrC,EACVsC,SAAUxB,EACVG,KAAK,OACLsB,KAAK,OACLrB,MAAOjB,EAAQS,KACf8B,YAAY,kCAGhB,kBAACnB,EAAA,EAAKS,MAAN,CAAYC,GAAIC,IAAKC,UAAU,WAAWC,GAAI,EAAGC,GAAI,GACnD,kBAACd,EAAA,EAAKe,QAAN,CACEC,SAAUrC,EACVsC,SAAUxB,EACVG,KAAK,WACLsB,KAAK,OACLrB,MAAOjB,EAAQU,SACf6B,YAAY,cAGhB,kBAACnB,EAAA,EAAKS,MAAN,CAAYC,GAAIC,IAAKC,UAAU,WAAWC,GAAI,EAAGC,GAAI,GACnD,kBAACd,EAAA,EAAKe,QAAN,CACEC,SAAUrC,EACVsC,SAAUxB,EACVG,KAAK,WACLsB,KAAK,WACLrB,MAAOjB,EAAQW,SACf4B,YAAY,cAGhB,kBAACR,EAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,GA5CdnC,EACL,kBAACyC,EAAA,EAAD,CAAQC,UAAU,YAAYC,QAAQ,SAASJ,KAAK,UAApD,cAIA,kBAACE,EAAA,EAAD,CAAQC,UAAU,YAAYC,QAAQ,UAAUJ,KAAK,UAArD,eCwCSK,MA5Ef,SAAuBvC,GACrB,IAAMwC,EAAMtC,qBAAWC,GACjBsC,EAAcC,iBAAO,MACrBC,EAAcD,iBAAO,MAgC3B,OACE,kBAAC,IAAME,SAAP,KACE,kBAAC5B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKQ,IAAN,CAAUa,UAAU,sBAClB,kBAACV,EAAA,EAAD,CAAKD,GAAIC,IAAKkB,GAAI,EAAGf,GAAI,EAAGO,UAAU,aACpC,kBAACrB,EAAA,EAAKe,QAAN,CAAce,IAAKL,EAAa7B,KAAK,mBAAmBsB,KAAK,OAAOC,YAAY,gBAElF,kBAACR,EAAA,EAAD,CAAKkB,GAAI,EAAGf,GAAI,GACd,kBAACM,EAAA,EAAD,CACEC,UAAU,YACVzB,KAAK,YACL0B,QAAQ,UACRJ,KAAK,SACLF,UAAWQ,EAAI7C,YACfoD,QA5CS,SAACrC,GACpBA,EAAES,iBACF,IAAMvB,EAAU,CACdoD,WAAW,EACXnD,OAAQ4C,EAAYQ,QAAQpC,OAE9BO,QAAQC,IAAI,8BAA+BzB,GAC3CA,EAAQC,QAAUG,EAAMkD,uBAAyBlD,EAAMkD,sBAAsBtD,KA+BrE,cAWF,kBAAC+B,EAAA,EAAD,CAAKkB,GAAI,EAAGf,GAAI,EAAGO,UAAU,aAC3B,kBAACrB,EAAA,EAAKe,QAAN,CAAce,IAAKH,EAAa/B,KAAK,qBAAqBsB,KAAK,OAAOC,YAAY,gBAEpF,kBAACR,EAAA,EAAD,CAAKkB,GAAI,EAAGf,GAAI,GACd,kBAACM,EAAA,EAAD,CACEC,UAAU,YACVzB,KAAK,cACL0B,QAAQ,SACRJ,KAAK,SACLF,UAAWQ,EAAI7C,YACfoD,QAjDS,SAACrC,GACpBA,EAAES,iBACF,IAAMvB,EAAU,CACdoD,WAAW,EACXnD,OAAQ8C,EAAYM,QAAQpC,OAE9BO,QAAQC,IAAI,8BAA+BzB,GAC3CA,EAAQC,QAAUG,EAAMkD,uBAAyBlD,EAAMkD,sBAAsBtD,KAoCrE,iBAjCY,WACpB,IAAMC,EAAU2C,EAAI3C,QAAU,YAAI2C,EAAI3C,QAAQsD,KAAK,OAAU,GAC7D,OAAOtD,EACL,uBAAGwC,UAAU,WACX,uDACA,0BAAMA,UAAU,gBAAgBxC,IAEhC,KAuCDuD,KCjCQC,MAvCf,SAAqBrD,GACnB,IAAMsD,EAAaZ,iBAAO,MACpBa,EAAeb,iBAAO,MAkB5B,OACE,kBAAC1B,EAAA,EAAD,CAAMC,GAAG,eAAeC,SAjBL,SAACR,GACpBU,QAAQC,IAAIrB,GACZU,EAAES,iBACF,IAAMvB,EAAU,CACd4D,MAAOF,EAAWL,QAAQpC,MAC1B4C,QAASF,EAAaN,QAAQpC,MAC9B6C,SAAU,SAACC,GACJA,IACHJ,EAAaN,QAAQpC,MAAQ,MAInCO,QAAQC,IAAI,4BAA6BzB,GACzCI,EAAM4D,qBAAuB5D,EAAM4D,oBAAoBhE,KAKrD,kBAACoB,EAAA,EAAKQ,IAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYC,GAAIC,IAAKC,UAAU,gBAAgBC,GAAI,GAAIC,GAAI,GACzD,kBAACd,EAAA,EAAKe,QAAN,CAAce,IAAKQ,EAAY1C,KAAK,gBAAgBsB,KAAK,OAAOC,YAAY,gBAE9E,kBAACnB,EAAA,EAAKS,MAAN,CAAYC,GAAIC,IAAKC,UAAU,kBAAkBC,GAAI,GAAIC,GAAI,GAC3D,kBAACd,EAAA,EAAKe,QAAN,CAAce,IAAKS,EAAc3C,KAAK,kBAAkBsB,KAAK,OAAOC,YAAY,qBAElF,kBAACR,EAAA,EAAD,CAAKE,GAAI,GAAIC,GAAI,GACf,kBAACM,EAAA,EAAD,CAAQC,UAAU,YAAYzB,KAAK,UAAU0B,QAAQ,UAAUJ,KAAK,SAASF,UAAWhC,EAAML,aAA9F,eCXV,SAASkE,EAAkB7D,GACzB,OACE,kBAAC8D,EAAA,EAAD,CAAWC,iBAAiB,IAAI1B,UAAU,SAExC,kBAAC2B,EAAA,EAAD,KACE,kBAACF,EAAA,EAAUG,OAAX,CAAkBvC,GAAIsC,IAAKE,OAAQ7B,UAAU,UAAU8B,SAAS,KAC9D,0BAAM9B,UAAU,cAAhB,qBAEF,kBAACyB,EAAA,EAAUM,SAAX,CAAoBD,SAAS,KAC3B,kBAACH,EAAA,EAAKK,KAAN,KACE,kBAAC,EAAgBrE,MAKvB,kBAACgE,EAAA,EAAD,KACE,kBAACF,EAAA,EAAUG,OAAX,CAAkBvC,GAAIsC,IAAKE,OAAQ7B,UAAU,UAAU8B,SAAS,KAC9D,0BAAM9B,UAAU,cAAhB,uBAEF,kBAACyB,EAAA,EAAUM,SAAX,CAAoBD,SAAS,KAC3B,kBAACH,EAAA,EAAKK,KAAN,KACE,kBAAC,EAAkBrE,MAKzB,kBAACgE,EAAA,EAAD,KACE,kBAACF,EAAA,EAAUG,OAAX,CAAkBvC,GAAIsC,IAAKE,OAAQ7B,UAAU,UAAU8B,SAAS,KAC9D,0BAAM9B,UAAU,cAAhB,qBAEF,kBAACyB,EAAA,EAAUM,SAAX,CAAoBD,SAAS,KAC3B,kBAACH,EAAA,EAAKK,KAAN,KACE,kBAAC,EAAgBrE,OCzC7B,IAAMsE,EAAkB,CACtBjE,KAAM,+BACNC,SAAU,KACVC,SAAU,MA2OGgE,E,YAvOb,WAAYvE,GAAQ,IAAD,uBACjB,4CAAMA,KAYRwE,eAAiB,SAACC,GAChB,OAAiB,IAAVA,EACL,kBAACC,EAAA,EAAD,CAAOC,MAAI,EAACrC,QAAQ,UAApB,QAGE,MAlBa,EAqBnBsC,gBAAkB,SAACC,GACjB,OAAOA,EACL,+BACE,kBAAC,IAAD,CAAQC,OAAO,uBAAuBD,GAAa,KAEnD,MA1Ba,EA6BnBE,YAAc,WACZ,IAAMC,EAAQ,EAAKC,MAAMC,SACnBC,EAAYH,EAAMI,KAAI,SAACC,EAAMZ,GAAP,OAC1B,kBAAC,IAAM7B,SAAP,CAAgBxE,IAAK,QAAUqG,GAC7B,kBAACa,EAAA,EAAUC,KAAX,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAMnB,KAAP,KACE,4BAAQhC,UAAU,gBAAgBgD,EAAK7B,MAAvC,MACA,0BAAMnB,UAAU,kBAAkBgD,EAAK5B,SACvC,2BAAOpB,UAAU,QAAjB,IAA0B2C,EAAMS,OAAShB,EAAzC,KACA,0BAAMpC,UAAU,QAAQ,EAAKuC,gBAAgBS,EAAKR,KAClD,0BAAMxC,UAAU,QAAQ,EAAKmC,eAAeC,WAMtD,OAAO,kBAACa,EAAA,EAAD,CAAWhD,QAAQ,SAAS6C,IA9ClB,EA8EnB5D,oBAAsB,SAAC3B,GACrBwB,QAAQC,IAAI,uBAAwBzB,GAChC,EAAKqF,MAAMtF,YACb,EAAK+F,OAAOC,MAER/F,GAAWA,EAAQS,MACrB,EAAKuF,QAAQhG,IApFA,EA4FnBsD,sBAAwB,SAACtD,GACvBwB,QAAQC,IAAI,yBAA0BzB,GADH,IAE3BoD,EAAsBpD,EAAtBoD,UAAWnD,EAAWD,EAAXC,OACnB,GAAI,EAAKoF,MAAMtF,aAAeE,EAAQ,CACpC,IAAMgG,EAAYhG,EAAOiG,MAAM,KAC3B9C,EACF,EAAKA,UAAU6C,GAEf,EAAKE,YAAYF,KApGJ,EAyGnBjC,oBAAsB,SAAChE,GACrBwB,QAAQC,IAAI,2BAA4BzB,GADP,IAEzB4D,EAAmB5D,EAAnB4D,MAAOC,EAAY7D,EAAZ6D,QACX,EAAKwB,MAAMtF,aAAe6D,GAASC,GACrC,EAAKuC,QAAQxC,EAAOC,EAAS7D,EAAQ8D,WA3GvC,IAAM9D,EAAUqG,EAAMtH,SAAS,YAAc2F,EACvCY,EAAYtF,GAAWqG,EAAMtH,SAASiB,EAAU,cAAiB,GAHtD,OAIjBwB,QAAQC,IAAI,cAAezB,EAAUsF,GAAYA,EAASO,QAAW,GACrE,EAAKR,MAAQ,CACXtF,aAAa,EACbC,QAASA,EACTC,OAAQ,IAAIC,IACZoF,SAAUA,GATK,E,sEAkDjB,OACE,kBAAC1F,EAAW0G,SAAZ,CAAqBrF,MAAOsF,KAAKlB,OAC/B,kBAACmB,EAAA,EAAD,KACE,kBAAC5E,EAAA,EAAD,CAAKa,UAAU,0BACb,wBAAIA,UAAU,MAAMX,GAAIC,KAAxB,iBAIF,kBAACH,EAAA,EAAD,KACE,kBAACqC,EAAD,CACEtC,oBAAqB4E,KAAK5E,oBAC1B2B,sBAAuBiD,KAAKjD,sBAC5BU,oBAAqBuC,KAAKvC,oBAC1BhE,QAASuG,KAAKlB,MAAMrF,WAIxB,kBAAC4B,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAKU,UAAU,QACb,mDAGJ,kBAACb,EAAA,EAAD,KAAM2E,KAAKpB,mB,kCAyCPsB,GACV,IAAIxG,EAMJ,OALIV,EAASkH,GACXxG,EAASwG,EAASP,MAAM,KACf9G,EAAWqH,KACpBxG,EAASwG,GAEJxG,EAAOuF,KAAI,SAACkB,GAAD,OAAQA,EAAGC,UAAQC,OAAOC,W,8BAGtCjD,EAAOC,GAA2B,IAAlBC,EAAiB,uDAAN,KACjCtC,QAAQC,IAAI,WAAYmC,EAAOC,GAC/B0C,KAAKT,OAAOM,QAAQxC,EAAOC,GAAS,SAACE,GAC9BA,EAGHvC,QAAQC,IAAI,iBAAkBsC,GAF9BvC,QAAQC,IAAI,cAAemC,EAAOC,GAIpCC,GAAYA,EAASC,Q,kCAIb0C,GAA4B,IAAD,OAAjB3C,EAAiB,uDAAN,KACzB7D,EAASsG,KAAKO,YAAYL,GAChCjF,QAAQC,IAAI,uBAAwB8E,KAAKlB,MAAMpF,QAC/CuB,QAAQC,IAAI,sBAAuBxB,GACnCsG,KAAKT,OAAOK,YAAYlG,GAAQ,SAAC8D,GAC/B,GAAKA,EAQHvC,QAAQuF,MAAM,qBAAsBhD,OAR5B,CACRvC,QAAQC,IAAI,iBAAkBxB,GAC9B,IAAM+G,EAAY,EAAK3B,MAAMpF,OAC7BA,EAAOgH,SAAQ,SAACC,GACdF,EAAUG,OAAOD,MAEnB,EAAKE,SAAS,CAAEnH,OAAQ+G,IAI1BlD,GAAYA,EAASC,Q,gCAIf0C,GAA4B,IAAD,OAAjB3C,EAAiB,uDAAN,KACvB7D,EAASsG,KAAKO,YAAYL,GAChCjF,QAAQC,IAAI,qBAAsB8E,KAAKlB,MAAMpF,QAC7CuB,QAAQC,IAAI,oBAAqBxB,GACjCsG,KAAKT,OAAO1C,UAAUnD,GAAQ,SAAC8D,EAAKsD,GAC7BtD,EAIHvC,QAAQuF,MAAM,mBAAoBhD,IAHlCvC,QAAQC,IAAI,eAAgB4F,GAC5B,EAAKD,SAAS,CAAEnH,OAAQ,IAAIC,IAAJ,sBAAYD,GAAZ,YAAuB,EAAKoF,MAAMpF,aAI5D6D,GAAYA,EAASC,EAAKsD,Q,mCAK5Bd,KAAKlB,MAAMtF,aAAewG,KAAKT,OAAOC,Q,8BAGhCuB,GAAO,IAAD,OACZ9F,QAAQC,IAAI,gBAAiB6F,GAC7Bf,KAAKT,OAASyB,IAAKvB,QAAQsB,EAAK7G,KAAM6G,GACtCf,KAAKT,OAAO0B,GAAG,WAAW,WACxBhG,QAAQC,IAAI,aACZ4E,EAAM9H,SAAS,UAAW+I,GAC1B,EAAKF,SAAS,CAAErH,YAAa,EAAK+F,OAAO2B,UAAWzH,QAASsH,IAC7D,EAAKlE,UAAU,oBAAoB,SAACW,GAClC,IAAKA,EAAK,CACR,IAAM2D,EAAMC,MAASzC,OAAO,uBAC5B,EAAKY,OAAOM,QAAQ,cAApB,2CAAuEsB,EAAvE,aAINnB,KAAKT,OAAO0B,GAAG,cAAc,WAC3BhG,QAAQC,IAAI,cACZ,EAAK2F,SAAS,CAAErH,YAAa,EAAK+F,OAAO2B,eAE3ClB,KAAKT,OAAO0B,GAAG,SAAS,WACtBhG,QAAQC,IAAI,SACZ,EAAK2F,SAAS,CAAErH,YAAa,EAAK+F,OAAO2B,eAE3ClB,KAAKT,OAAO0B,GAAG,SAAS,SAACzD,GACvBvC,QAAQC,IAAI,SAAWsC,GACvB,EAAKqD,SAAS,CAAErH,YAAa,EAAK+F,OAAO2B,eAE3ClB,KAAKT,OAAO0B,GAAG,WAAW,SAAC5D,EAAOC,EAAS+D,GACzC,EAAKR,SACH,CACE9B,SAAS,CAAE,CAAEL,GAAI,IAAI4C,KAAQjE,MAAOA,EAAOC,QAASA,EAAQnE,aAApD,mBAAqE,EAAK2F,MAAMC,aAE1F,WACEe,EAAM9H,SAAS,EAAK8G,MAAMrF,QAAU,YAAa,EAAKqF,MAAMC,UAC5D9D,QAAQC,IAAI,yBAA2B,EAAK4D,MAAMC,SAASO,gB,qCAOjE,IAAM7F,EAAUuG,KAAKlB,MAAMrF,QAC3BA,EAAQS,MAAQT,EAAQS,KAAKqH,WAAW,OAASvB,KAAKP,QAAQhG,K,0CAI9DwB,QAAQC,IAAI,oBAAqB8E,KAAKlB,MAAMrF,W,6CAK5CwB,QAAQC,IAAI,wBACR8E,KAAKlB,MAAMtF,aACbsG,EAAM9H,SAAS,UAAWgI,KAAKlB,MAAMrF,SAEvCqG,EAAM9H,SAASgI,KAAKlB,MAAMrF,QAAU,YAAauG,KAAKlB,MAAMC,c,GApO9CzF,IAAMkI,WCTJlB,QACW,cAA7BnI,OAAOsJ,SAASC,UAEe,UAA7BvJ,OAAOsJ,SAASC,UAEhBvJ,OAAOsJ,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.42bbc311.chunk.js","sourcesContent":["export default {\n  storeSet: function(key, obj) {\n    window.localStorage.setItem(\"mqtt_store_item_\" + key, JSON.stringify(obj));\n  },\n  storeGet: function(key) {\n    let s = window.localStorage.getItem(\"mqtt_store_item_\" + key);\n    return s ? JSON.parse(s) : undefined;\n  }\n};\n","export const isIterable = function(obj) {\n  // checks for null and undefined\n  if (obj == null) {\n    return false;\n  }\n  return typeof obj[Symbol.iterator] === \"function\";\n};\n\nexport const isString = function(obj) {\n  return Object.prototype.toString.call(obj) === \"[object String]\";\n};\n\nexport default {\n  isIterable,\n  isString\n};\n","import React from \"react\";\n\nexport const AppContext = React.createContext({\n  isConnected: false,\n  options: {},\n  topics: new Set()\n});\n\nexport default AppContext;\n","import React, { useState, useContext } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport AppContxt from \"../context\";\n\nconst ConnectForm = (props, context) => {\n  const {isConnected} = useContext(AppContxt);\n  const [options, setOptions] = useState({\n    host: props.options.host || \"\",\n    username: props.options.username || \"\",\n    password: props.options.password || \"\"\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    // console.log(\"handleChange \", name, value);\n    const newOptions = Object.assign({}, options);\n\n    newOptions[name] = value;\n    setOptions(newOptions);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"handleSubmit \", e.target);\n    // empty username not equal to no username\n    const fixedOptions = {\n      host: options.host,\n      username: options.username || null,\n      password: options.password || null\n    };\n    console.log(\"ConnectForm.handleSubmit \", fixedOptions);\n    props.onConnectFormSubmit && props.onConnectFormSubmit(fixedOptions);\n  };\n\n  const renderSubmit = () => {\n    return isConnected ? (\n      <Button className=\"btn-block\" variant=\"danger\" type=\"submit\">\n        Disconnect\n      </Button>\n    ) : (\n      <Button className=\"btn-block\" variant=\"primary\" type=\"submit\">\n        Connect\n      </Button>\n    );\n  };\n\n  return (\n    <Form id=\"connect-form\" onSubmit={handleSubmit}>\n      <Form.Row>\n        <Form.Group as={Col} controlId=\"host\" xs={12} md={4}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"host\"\n            type=\"text\"\n            value={options.host}\n            placeholder=\"ws://test.mosquitto.org:8080\"\n          />\n        </Form.Group>\n        <Form.Group as={Col} controlId=\"username\" xs={6} md={3}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"username\"\n            type=\"text\"\n            value={options.username}\n            placeholder=\"Username\"\n          />\n        </Form.Group>\n        <Form.Group as={Col} controlId=\"password\" xs={6} md={3}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"password\"\n            type=\"password\"\n            value={options.password}\n            placeholder=\"Password\"\n          />\n        </Form.Group>\n        <Col xs={12} md={2}>\n          {renderSubmit()}\n        </Col>\n      </Form.Row>\n    </Form>\n  );\n};\n\nexport default ConnectForm;\n","import React, { useRef, useContext } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport AppContxt from \"../context\";\n\nfunction SubscribeForm(props) {\n  const ctx = useContext(AppContxt);\n  const topicInput1 = useRef(null);\n  const topicInput2 = useRef(null);\n\n  const handleClick1 = (e) => {\n    e.preventDefault();\n    const options = {\n      subscribe: true,\n      topics: topicInput1.current.value\n    };\n    console.log(\"SubscribeForm.handleClick1 \", options);\n    options.topics && props.onSubscribeFormSubmit && props.onSubscribeFormSubmit(options);\n  };\n\n  const handleClick2 = (e) => {\n    e.preventDefault();\n    const options = {\n      subscribe: false,\n      topics: topicInput2.current.value\n    };\n    console.log(\"SubscribeForm.handleClick2 \", options);\n    options.topics && props.onSubscribeFormSubmit && props.onSubscribeFormSubmit(options);\n  };\n\n  const renderInfoBar = () => {\n    const topics = (ctx.topics && [...ctx.topics].join(\", \")) || \"\";\n    return topics ? (\n      <p className=\"m-0 p-0\">\n        <strong>Subscribed Topics: </strong>\n        <span className=\"text-success\">{topics}</span>\n      </p>\n    ) : null;\n  };\n\n  return (\n    <React.Fragment>\n      <Form>\n        <Form.Row className=\"align-items-center\">\n          <Col as={Col} sm={6} md={3} className=\"mb-3 mt-3\">\n            <Form.Control ref={topicInput1} name=\"subscribe-topics\" type=\"text\" placeholder=\"topic/test\" />\n          </Col>\n          <Col sm={6} md={3}>\n            <Button\n              className=\"btn-block\"\n              name=\"subscribe\"\n              variant=\"primary\"\n              type=\"submit\"\n              disabled={!ctx.isConnected}\n              onClick={handleClick1}\n            >\n              Subscribe\n            </Button>\n          </Col>\n          <Col sm={6} md={3} className=\"mb-3 mt-3\">\n            <Form.Control ref={topicInput2} name=\"unsubscribe-topics\" type=\"text\" placeholder=\"topic/test\" />\n          </Col>\n          <Col sm={6} md={3}>\n            <Button\n              className=\"btn-block\"\n              name=\"unsubscribe\"\n              variant=\"danger\"\n              type=\"submit\"\n              disabled={!ctx.isConnected}\n              onClick={handleClick2}\n            >\n              Unsubscibe\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n      {renderInfoBar()}\n    </React.Fragment>\n  );\n}\n\nexport default SubscribeForm;\n","import React, { useRef } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction PublishForm(props) {\n  const topicInput = useRef(null);\n  const messageInput = useRef(null);\n\n  const handleSubmit = (e) => {\n    console.log(props);\n    e.preventDefault();\n    const options = {\n      topic: topicInput.current.value,\n      message: messageInput.current.value,\n      callback: (err) => {\n        if (!err) {\n          messageInput.current.value = \"\";\n        }\n      }\n    };\n    console.log(\"PublishForm.handleSubmit \", options);\n    props.onPublishFormSubmit && props.onPublishFormSubmit(options);\n  };\n\n  return (\n    <Form id=\"publish-form\" onSubmit={handleSubmit}>\n      <Form.Row>\n        <Form.Group as={Col} controlId=\"publish-topic\" xs={12} md={3}>\n          <Form.Control ref={topicInput} name=\"publish-topic\" type=\"text\" placeholder=\"topic name\" />\n        </Form.Group>\n        <Form.Group as={Col} controlId=\"publish-message\" xs={12} md={7}>\n          <Form.Control ref={messageInput} name=\"publish-message\" type=\"text\" placeholder=\"message content\" />\n        </Form.Group>\n        <Col xs={12} md={2}>\n          <Button className=\"btn-block\" name=\"publish\" variant=\"primary\" type=\"submit\" disabled={!props.isConnected}>\n            Publish\n          </Button>\n        </Col>\n      </Form.Row>\n    </Form>\n  );\n}\n\nexport default PublishForm;\n\n// https://zacjones.io/handle-multiple-inputs-in-react-with-hooks\n// first approach, useState\n// need: onChange= ()=>{setServer}\n// use: user\n//   const [server, setServer] = useState(\"\");\n//   const [user, setUser] = useState(\"\");\n//   const [pass, setPass] = useState(\"\");\n// second approach, useRef\n// need: ref={serverInput}\n// use: serverInput.current.value\n//   const serverInput = useRef(null);\n//   const userInput = useRef(null);\n//   const passInput = useRef(null);\n// third approach\n// use callback function\n// need: onFormChange\n// use: onFormChnage(e){ e.target.name, e.target.value }\n// fourth approach\n// use useReducer\n// fix https://stackoverflow.com/questions/47012169/\n//   let extraOpts = props.isConnected ? { disabled: \"disabled\" } : {};\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport ConnectForm from \"./form_connect\";\nimport SubscribeForm from \"./form_subscribe\";\nimport PublishForm from \"./form_publish\";\n\n// onFormSubmit={this.onFormSubmit}\n// isConnected={this.state.isConnected}\n// options={this.state.options}\n// eslint-disable-next-line\nfunction FormCard(props) {\n  return (\n    <Card>\n      <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey={props.index}>\n        <span className=\"text-white\">{props.title}</span>\n      </Accordion.Toggle>\n      <Accordion.Collapse eventKey={props.index}>\n        <Card.Body>{props.children}</Card.Body>\n      </Accordion.Collapse>\n    </Card>\n  );\n}\n\nfunction HeaderActionCards(props) {\n  return (\n    <Accordion defaultActiveKey=\"0\" className=\"w-100\">\n      {/* Connect Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"0\">\n          <span className=\"text-white\"> Connect Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Body>\n            <ConnectForm {...props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      {/* Subscribe Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"1\">\n          <span className=\"text-white\"> Subscribe Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"1\">\n          <Card.Body>\n            <SubscribeForm {...props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      {/* Publish Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"2\">\n          <span className=\"text-white\"> Publish Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"2\">\n          <Card.Body>\n            <PublishForm {...props} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nexport { HeaderActionCards };\n","import React from \"react\";\nimport mqtt from \"mqtt\";\nimport Moment from \"react-moment\";\nimport store from \"./utils/store\";\nimport { isIterable, isString } from \"./utils/utils\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Media from \"react-bootstrap/Media\";\nimport Badge from \"react-bootstrap/Badge\";\nimport moment from \"moment\";\nimport { AppContext } from \"./context\";\nimport { HeaderActionCards } from \"./components/action_cards\";\n\nconst DEFAULT_OPTIONS = {\n  host: \"ws://test.mosquitto.org:8080\",\n  username: null,\n  password: null\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const options = store.storeGet(\"options\") || DEFAULT_OPTIONS;\n    const messages = (options && store.storeGet(options + \"_messages\")) || [];\n    console.log(\"constructor\", options, (messages && messages.length) || 0);\n    this.state = {\n      isConnected: false,\n      options: options,\n      topics: new Set(),\n      messages: messages\n    };\n  }\n\n  renderNewBadge = (index) => {\n    return index === 0 ? (\n      <Badge pill variant=\"danger\">\n        New!\n      </Badge>\n    ) : null;\n  };\n\n  renderCreatedAt = (ts) => {\n    return ts ? (\n      <small>\n        <Moment format=\"YYYY/MM/DD HH:mm:ss\">{ts}</Moment>{\" \"}\n      </small>\n    ) : null;\n  };\n\n  renderItems = () => {\n    const items = this.state.messages;\n    const listItems = items.map((item, index) => (\n      <React.Fragment key={\"item_\" + index}>\n        <ListGroup.Item>\n          <Media>\n            <Media.Body>\n              <strong className=\"text-primary\">{item.topic}: </strong>\n              <span className=\"text-secondary\">{item.message}</span>\n              <small className=\"pl-2\">({items.length - index})</small>\n              <span className=\"pl-2\">{this.renderCreatedAt(item.ts)}</span>\n              <span className=\"pl-2\">{this.renderNewBadge(index)}</span>\n            </Media.Body>\n          </Media>\n        </ListGroup.Item>\n      </React.Fragment>\n    ));\n    return <ListGroup variant=\"flush\">{listItems}</ListGroup>;\n  };\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        <Container>\n          <Row className=\"justify-content-center\">\n            <h1 className=\"p-3\" as={Col}>\n              MQTT Monitor\n            </h1>\n          </Row>\n          <Row>\n            <HeaderActionCards\n              onConnectFormSubmit={this.onConnectFormSubmit}\n              onSubscribeFormSubmit={this.onSubscribeFormSubmit}\n              onPublishFormSubmit={this.onPublishFormSubmit}\n              options={this.state.options}\n            />\n          </Row>\n          {/* <Row></Row> */}\n          <Row>\n            <Col className=\"mt-3\">\n              <h3>Received Messages</h3>\n            </Col>\n          </Row>\n          <Row>{this.renderItems()}</Row>\n        </Container>\n      </AppContext.Provider>\n    );\n  }\n\n  onConnectFormSubmit = (options) => {\n    console.log(\"onConnectFormSubmit \", options);\n    if (this.state.isConnected) {\n      this.client.end();\n    } else {\n      if (options && options.host) {\n        this.connect(options);\n        // this.setState({ options: options }, () => {\n        //   this.checkConnect();\n        // });\n      }\n    }\n  };\n\n  onSubscribeFormSubmit = (options) => {\n    console.log(\"onSubscribeFormSubmit \", options);\n    const { subscribe, topics } = options;\n    if (this.state.isConnected && topics) {\n      const theTopics = topics.split(\" \");\n      if (subscribe) {\n        this.subscribe(theTopics);\n      } else {\n        this.unsubscribe(theTopics);\n      }\n    }\n  };\n\n  onPublishFormSubmit = (options) => {\n    console.log(\"onPublishFormFormSubmit \", options);\n    const { topic, message } = options;\n    if (this.state.isConnected && topic && message) {\n      this.publish(topic, message, options.callback);\n    }\n  };\n\n  cleanTopics(inTopics) {\n    let topics;\n    if (isString(inTopics)) {\n      topics = inTopics.split(\" \");\n    } else if (isIterable(inTopics)) {\n      topics = inTopics;\n    }\n    return topics.map((it) => it.trim()).filter(Boolean);\n  }\n\n  publish(topic, message, callback = null) {\n    console.log(\"publish \", topic, message);\n    this.client.publish(topic, message, (err) => {\n      if (!err) {\n        console.log(\"published: \", topic, message);\n      } else {\n        console.log(\"publish fail: \", err);\n      }\n      callback && callback(err);\n    });\n  }\n\n  unsubscribe(inTopics, callback = null) {\n    const topics = this.cleanTopics(inTopics);\n    console.log(\"unsubscribe current \", this.state.topics);\n    console.log(\"unsubscribe target \", topics);\n    this.client.unsubscribe(topics, (err) => {\n      if (!err) {\n        console.log(\"unsubscribed: \", topics);\n        const newTopics = this.state.topics;\n        topics.forEach((el) => {\n          newTopics.delete(el);\n        });\n        this.setState({ topics: newTopics });\n      } else {\n        console.error(\"unsubscribe fail: \", err);\n      }\n      callback && callback(err);\n    });\n  }\n\n  subscribe(inTopics, callback = null) {\n    const topics = this.cleanTopics(inTopics);\n    console.log(\"subscribe current \", this.state.topics);\n    console.log(\"subscribe target \", topics);\n    this.client.subscribe(topics, (err, granted) => {\n      if (!err) {\n        console.log(\"subscribed: \", granted);\n        this.setState({ topics: new Set([...topics, ...this.state.topics]) });\n      } else {\n        console.error(\"subscribe fail: \", err);\n      }\n      callback && callback(err, granted);\n    });\n  }\n\n  disconnect() {\n    this.state.isConnected && this.client.end();\n  }\n\n  connect(opts) {\n    console.log(\"connect with \", opts);\n    this.client = mqtt.connect(opts.host, opts);\n    this.client.on(\"connect\", () => {\n      console.log(\"connected\");\n      store.storeSet(\"options\", opts);\n      this.setState({ isConnected: this.client.connected, options: opts });\n      this.subscribe(\"pump/# monitor/#\", (err) => {\n        if (!err) {\n          const now = moment().format(\"YYYY/MM/DD HH:mm:ss\");\n          this.client.publish(\"monitor/log\", `Hello, MQTT Monitor is online at ${now}!`);\n        }\n      });\n    });\n    this.client.on(\"disconnect\", () => {\n      console.log(\"disconnect\");\n      this.setState({ isConnected: this.client.connected });\n    });\n    this.client.on(\"close\", () => {\n      console.log(\"close\");\n      this.setState({ isConnected: this.client.connected });\n    });\n    this.client.on(\"error\", (err) => {\n      console.log(\"error:\" + err);\n      this.setState({ isConnected: this.client.connected });\n    });\n    this.client.on(\"message\", (topic, message, packet) => {\n      this.setState(\n        {\n          messages: [{ ts: new Date(), topic: topic, message: message.toString() }, ...this.state.messages]\n        },\n        () => {\n          store.storeSet(this.state.options + \"_messages\", this.state.messages);\n          console.log(\"total messages count: \" + this.state.messages.length);\n        }\n      );\n    });\n  }\n\n  checkConnect() {\n    const options = this.state.options;\n    options.host && options.host.startsWith(\"ws\") && this.connect(options);\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\", this.state.options);\n    // this.checkConnect();\n  }\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount\");\n    if (this.state.isConnected) {\n      store.storeSet(\"options\", this.state.options);\n    }\n    store.storeSet(this.state.options + \"_messages\", this.state.messages);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}