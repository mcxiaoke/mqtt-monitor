{"version":3,"sources":["utils/store.js","utils/utils.js","context/AppContext.js","components/MessageList.js","components/ConnectForm.js","components/widgets.js","components/SubscribeForm.js","components/PublishForm.js","components/HeaderActions.js","App.js","serviceWorker.js","index.js"],"names":["storeSet","key","obj","window","localStorage","setItem","JSON","stringify","storeGet","s","getItem","parse","undefined","isIterable","Symbol","iterator","isString","Object","prototype","toString","call","React","createContext","isConnected","options","topics","Set","CreatedAt","ts","format","NewBadge","index","Badge","pill","variant","MessageItem","item","length","ListGroup","Item","Media","Body","className","topic","message","props","messages","useContext","AppContext","listItems","map","Fragment","ConnectButton","Button","type","ctx","AppContxt","useState","setOptions","handleChange","e","target","name","value","assign","Form","onSubmit","preventDefault","fixedOptions","host","username","password","onConnectFormSubmit","Row","Group","as","Col","xs","md","lg","Control","disabled","onChange","placeholder","TopicInfo","onTopicClick","handleClick","textContent","tps","text","onClick","size","topicInput1","useRef","topicInput2","handleClick1","subscribe","current","console","log","onSubscribeFormSubmit","handleClick2","handleKeyUp","sm","onKeyUp","ref","topicInput","messageInput","callback","err","isValid","onPublishFormSubmit","Accordion","defaultActiveKey","Card","Toggle","Header","eventKey","Collapse","ConnectForm","SubscribeForm","PublishForm","MQTT_OPTIONS","App","withReactContent","Swal","state","client","end","connect","theTopics","split","unsubscribe","publish","store","Provider","this","Container","HeaderActions","MessageList","inTopics","it","trim","filter","Boolean","cleanTopics","error","newTopics","forEach","el","delete","setState","granted","opts","connectOpts","reconnectPeriod","mqtt","on","connected","now","moment","packet","Date","startsWith","Component","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6124d7b3.chunk.js","sourcesContent":["export default {\n  storeSet: function(key, obj) {\n    window.localStorage.setItem(\"mqtt_store_item_\" + key, JSON.stringify(obj));\n  },\n  storeGet: function(key) {\n    let s = window.localStorage.getItem(\"mqtt_store_item_\" + key);\n    return s ? JSON.parse(s) : undefined;\n  }\n};\n","export const isIterable = function(obj) {\n  // checks for null and undefined\n  if (obj == null) {\n    return false;\n  }\n  return typeof obj[Symbol.iterator] === \"function\";\n};\n\nexport const isString = function(obj) {\n  return Object.prototype.toString.call(obj) === \"[object String]\";\n};\n\nexport default {\n  isIterable,\n  isString\n};\n","import React from \"react\";\n\nexport default React.createContext({\n  isConnected: false,\n  options: {},\n  topics: new Set()\n});\n","import React, { useContext } from \"react\";\nimport Moment from \"react-moment\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Media from \"react-bootstrap/Media\";\nimport Badge from \"react-bootstrap/Badge\";\nimport AppContext from \"../context/AppContext\";\n\nconst CreatedAt = (ts) => {\n  return ts ? (\n    <small>\n      <Moment format=\"YYYY/MM/DD HH:mm:ss\">{ts}</Moment>{\" \"}\n    </small>\n  ) : null;\n};\n\nconst NewBadge = (index) => {\n  return index === 0 ? (\n    <Badge pill variant=\"danger\">\n      New!\n    </Badge>\n  ) : null;\n};\n\nconst MessageItem = ({ item, index, length }) => {\n  return (\n    <ListGroup.Item>\n      <Media>\n        <Media.Body>\n          <strong className=\"text-primary\">{item.topic}: </strong>\n          <span className=\"text-secondary\">{item.message}</span>\n          <small className=\"pl-2\">({length - index})</small>\n          <span className=\"pl-2\">\n            <CreatedAt ts={item.ts} />\n          </span>\n          <span className=\"pl-2\">\n            <NewBadge index={index} />\n          </span>\n        </Media.Body>\n      </Media>\n    </ListGroup.Item>\n  );\n};\n\nexport default (props) => {\n  const { messages } = useContext(AppContext);\n  const listItems = messages.map((item, index) => (\n    <React.Fragment key={\"item_\" + index}>\n      <MessageItem item={item} index={index} length={messages.length} />\n    </React.Fragment>\n  ));\n  return <ListGroup variant=\"flush\">{listItems}</ListGroup>;\n};\n","import React, { useState, useContext } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport AppContxt from \"../context/AppContext\";\n\nconst ConnectButton = ({ isConnected }) => {\n  return isConnected ? (\n    <Button className=\"btn-block\" variant=\"danger\" type=\"submit\">\n      Disconnect\n    </Button>\n  ) : (\n    <Button className=\"btn-block\" variant=\"primary\" type=\"submit\">\n      Connect\n    </Button>\n  );\n};\n\nexport default (props) => {\n  const ctx = useContext(AppContxt);\n  const { isConnected } = ctx;\n  const [options, setOptions] = useState(ctx.options);\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setOptions(Object.assign({}, options, { [name]: value }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // empty username not equal to no username\n    const fixedOptions = {\n      host: options.host,\n      username: options.username || null,\n      password: options.password || null\n    };\n    // console.log(\"ConnectForm.handleSubmit \", fixedOptions);\n    fixedOptions.host && props.onConnectFormSubmit && props.onConnectFormSubmit(fixedOptions);\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Row>\n        <Form.Group as={Col} xs={12} md={4} lg={4}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"host\"\n            type=\"text\"\n            value={options.host}\n            placeholder=\"ws://test.mosquitto.org:8080\"\n          />\n        </Form.Group>\n        <Form.Group as={Col} xs={6} md={3} lg={3}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"username\"\n            type=\"text\"\n            value={options.username}\n            placeholder=\"Username\"\n          />\n        </Form.Group>\n        <Form.Group as={Col} xs={6} md={2} lg={3}>\n          <Form.Control\n            disabled={isConnected}\n            onChange={handleChange}\n            name=\"password\"\n            type=\"password\"\n            value={options.password}\n            placeholder=\"Password\"\n          />\n        </Form.Group>\n        <Col xs={12} md={3} lg={2}>\n          <ConnectButton isConnected={isConnected} />\n        </Col>\n      </Form.Row>\n    </Form>\n  );\n};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport const TopicInfo = ({ topics, onTopicClick }) => {\n  const handleClick = (e) => {\n    onTopicClick && onTopicClick(e.target.textContent);\n  };\n  const tps = [...topics].map((text) => {\n    return (\n      <CopyToClipboard key={text} text={text}>\n        <Button onClick={handleClick} variant=\"outline-success\" className=\"mr-2\" size=\"sm\">\n          {text}\n        </Button>\n      </CopyToClipboard>\n    );\n  });\n  return (\n    <p className=\"m-0 p-0\">\n      <strong>Subscribed Topics:</strong>\n      {tps}\n    </p>\n  );\n};\n\nexport const SimpleInfo = ({ name, value }) => {\n  return (\n    <p className=\"m-0 p-0\">\n      <strong>{name}</strong>\n      <span className=\"text-success\">{value}</span>\n    </p>\n  );\n};\n","import React, { useRef, useContext } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport AppContxt from \"../context/AppContext\";\nimport { TopicInfo } from \"./widgets\";\n\nexport default (props) => {\n  const { isConnected, topics } = useContext(AppContxt);\n  const topicInput1 = useRef(null);\n  const topicInput2 = useRef(null);\n\n  const handleClick1 = (e) => {\n    const options = {\n      subscribe: true,\n      topics: topicInput1.current.value\n    };\n    console.log(\"SubscribeForm.handleClick1 \", options);\n    options.topics && props.onSubscribeFormSubmit && props.onSubscribeFormSubmit(options);\n    topicInput1.current.value = \"\";\n  };\n\n  const handleClick2 = (e) => {\n    const options = {\n      subscribe: false,\n      topics: topicInput2.current.value\n    };\n    console.log(\"SubscribeForm.handleClick2 \", options);\n    options.topics && props.onSubscribeFormSubmit && props.onSubscribeFormSubmit(options);\n    topicInput2.current.value = \"\";\n  };\n\n  // Pressing the enter key triggers the click handler of the first type=\"submit\" button\n  // https://dzello.com/blog/2017/02/19/demystifying-enter-key-submission-for-react-forms/\n  const handleKeyUp = (e) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      if (e.target === topicInput1.current) {\n        handleClick1(null);\n      } else if (e.target === topicInput2.current) {\n        handleClick2(null);\n      }\n    }\n  };\n\n  const onTopicClick = (topic) => {\n    console.log(\"onTopicClick\", topic);\n    topicInput2.current.value = topic;\n  };\n\n  return (\n    <React.Fragment>\n      <Form>\n        <Form.Row className=\"align-items-center\">\n          <Col as={Col} sm={6} md={3} className=\"mb-3 mt-3\">\n            <Form.Control\n              onKeyUp={handleKeyUp}\n              ref={topicInput1}\n              name=\"subscribe-topics\"\n              type=\"text\"\n              placeholder=\"topic/test\"\n            />\n          </Col>\n          <Col sm={6} md={3}>\n            <Button\n              className=\"btn-block\"\n              name=\"subscribe\"\n              variant=\"primary\"\n              type=\"button\"\n              disabled={!isConnected}\n              onClick={handleClick1}\n            >\n              Subscribe\n            </Button>\n          </Col>\n          <Col sm={6} md={3} className=\"mb-3 mt-3\">\n            <Form.Control\n              onKeyUp={handleKeyUp}\n              ref={topicInput2}\n              name=\"unsubscribe-topics\"\n              type=\"text\"\n              placeholder=\"topic/test\"\n            />\n          </Col>\n          <Col sm={6} md={3}>\n            <Button\n              className=\"btn-block\"\n              name=\"unsubscribe\"\n              variant=\"danger\"\n              type=\"button\"\n              disabled={!isConnected}\n              onClick={handleClick2}\n            >\n              Unsubscibe\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n      <TopicInfo topics={topics} onTopicClick={onTopicClick} />\n    </React.Fragment>\n  );\n};\n","import React, { useRef, useContext } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport AppContxt from \"../context/AppContext\";\nimport { TopicInfo } from \"./widgets\";\n\nexport default (props) => {\n  const { isConnected, topics } = useContext(AppContxt);\n  const topicInput = useRef(null);\n  const messageInput = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const options = {\n      topic: topicInput.current.value,\n      message: messageInput.current.value,\n      callback: (err) => {\n        if (!err) {\n          messageInput.current.value = \"\";\n        }\n      },\n      isValid: () => {\n        return options.topic && options.message;\n      }\n    };\n    // console.log(\"PublishForm.handleSubmit \", options);\n    options.isValid() && props.onPublishFormSubmit && props.onPublishFormSubmit(options);\n  };\n\n  const onTopicClick = (topic) => {\n    console.log(\"onTopicClick\", topic);\n    topicInput.current.value = topic;\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Form.Row>\n          <Form.Group as={Col} xs={12} md={3}>\n            <Form.Control ref={topicInput} name=\"publish-topic\" type=\"text\" placeholder=\"topic name\" />\n          </Form.Group>\n          <Form.Group as={Col} xs={12} md={7}>\n            <Form.Control ref={messageInput} name=\"publish-message\" type=\"text\" placeholder=\"message content\" />\n          </Form.Group>\n          <Col xs={12} md={2}>\n            <Button className=\"btn-block\" name=\"publish\" variant=\"primary\" type=\"submit\" disabled={!isConnected}>\n              Publish\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n      <TopicInfo topics={topics} onTopicClick={onTopicClick} />\n    </>\n  );\n};\n\n// https://zacjones.io/handle-multiple-inputs-in-react-with-hooks\n// first approach, useState\n// need: onChange= ()=>{setServer}\n// use: user\n//   const [server, setServer] = useState(\"\");\n//   const [user, setUser] = useState(\"\");\n//   const [pass, setPass] = useState(\"\");\n// second approach, useRef\n// need: ref={serverInput}\n// use: serverInput.current.value\n//   const serverInput = useRef(null);\n//   const userInput = useRef(null);\n//   const passInput = useRef(null);\n// third approach\n// use callback function\n// need: onFormChange\n// use: onFormChnage(e){ e.target.name, e.target.value }\n// fourth approach\n// use useReducer\n// fix https://stackoverflow.com/questions/47012169/\n//   let extraOpts = props.isConnected ? { disabled: \"disabled\" } : {};\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport ConnectForm from \"./ConnectForm\";\nimport SubscribeForm from \"./SubscribeForm\";\nimport PublishForm from \"./PublishForm\";\n\n// onFormSubmit={this.onFormSubmit}\n// isConnected={this.state.isConnected}\n// options={this.state.options}\n// eslint-disable-next-line\nfunction FormCard(props) {\n  return (\n    <Card>\n      <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey={props.index}>\n        <span className=\"text-white\">{props.title}</span>\n      </Accordion.Toggle>\n      <Accordion.Collapse eventKey={props.index}>\n        <Card.Body>{props.children}</Card.Body>\n      </Accordion.Collapse>\n    </Card>\n  );\n}\n\nexport default (props) => {\n  return (\n    <Accordion defaultActiveKey=\"0\" className=\"w-100\">\n      {/* Connect Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"0\">\n          <span className=\"text-white\"> Connect Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Body>\n            <ConnectForm onConnectFormSubmit={props.onConnectFormSubmit} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      {/* Subscribe Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"1\">\n          <span className=\"text-white\"> Subscribe Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"1\">\n          <Card.Body>\n            <SubscribeForm onSubscribeFormSubmit={props.onSubscribeFormSubmit} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n      {/* Publish Form Card */}\n      <Card>\n        <Accordion.Toggle as={Card.Header} className=\"bg-dark\" eventKey=\"2\">\n          <span className=\"text-white\"> Publish Options</span>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey=\"2\">\n          <Card.Body>\n            <PublishForm onPublishFormSubmit={props.onPublishFormSubmit} />\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n};\n","import React from \"react\";\nimport mqtt from \"mqtt\";\nimport store from \"./utils/store\";\nimport { isIterable, isString } from \"./utils/utils\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport moment from \"moment\";\nimport AppContext from \"./context/AppContext\";\nimport MessageList from \"./components/MessageList\";\nimport HeaderActions from \"./components/HeaderActions\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nconst MQTT_OPTIONS = {\n  host: \"ws://test.mosquitto.org:8080\",\n  username: null,\n  password: null\n};\n\nconst MySwal = withReactContent(Swal);\n// https://www.npmjs.com/package/sweetalert2\n// eslint-disable-next-line no-unused-vars\nconst showAlert = (title, message, error) => {\n  MySwal.fire(title, message, error);\n};\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    const options = store.storeGet(\"options\") || MQTT_OPTIONS;\n    const messages = (options && store.storeGet(options + \"_messages\")) || [];\n    this.state = {\n      isConnected: false,\n      options: options,\n      topics: new Set(),\n      messages: messages\n    };\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        <Container>\n          <Row className=\"justify-content-center\">\n            <h1 className=\"p-3\" as={Col}>\n              MQTT Monitor\n            </h1>\n          </Row>\n          <Row>\n            <HeaderActions\n              onConnectFormSubmit={this.onConnectFormSubmit}\n              onSubscribeFormSubmit={this.onSubscribeFormSubmit}\n              onPublishFormSubmit={this.onPublishFormSubmit}\n            />\n          </Row>\n          <Row>\n            <Col className=\"mt-3\">\n              <h3>Received Messages</h3>\n            </Col>\n          </Row>\n          <Row>\n            <MessageList />\n          </Row>\n        </Container>\n      </AppContext.Provider>\n    );\n  }\n\n  onConnectFormSubmit = (options) => {\n    console.log(\"onConnectFormSubmit \", options);\n    if (this.state.isConnected) {\n      this.client.end();\n    } else {\n      if (options && options.host) {\n        this.connect(options);\n        // this.setState({ options: options }, () => {\n        //   this.checkConnect();\n        // });\n      }\n    }\n  };\n\n  onSubscribeFormSubmit = (options) => {\n    console.log(\"onSubscribeFormSubmit \", options);\n    const { subscribe, topics } = options;\n    if (this.state.isConnected && topics) {\n      const theTopics = topics.split(\" \");\n      if (subscribe) {\n        this.subscribe(theTopics);\n      } else {\n        this.unsubscribe(theTopics);\n      }\n    }\n  };\n\n  onPublishFormSubmit = (options) => {\n    console.log(\"onPublishFormFormSubmit \", options);\n    const { topic, message } = options;\n    if (this.state.isConnected && topic && message) {\n      this.publish(topic, message, options.callback);\n    }\n  };\n\n  cleanTopics(inTopics) {\n    let topics;\n    if (isString(inTopics)) {\n      topics = inTopics.split(\" \");\n    } else if (isIterable(inTopics)) {\n      topics = inTopics;\n    }\n    return topics.map((it) => it.trim()).filter(Boolean);\n  }\n\n  publish(topic, message, callback) {\n    console.log(\"publish\", topic, message);\n    this.client.publish(topic, message, (err) => {\n      if (!err) {\n        console.log(\"published:\", topic, message);\n      } else {\n        console.log(\"publish fail:\", err);\n      }\n      callback && callback(err);\n    });\n  }\n\n  unsubscribe(inTopics, callback) {\n    const topics = this.cleanTopics(inTopics);\n    console.log(\"unsubscribe to\", topics);\n    this.client.unsubscribe(topics, (err) => {\n      if (!err) {\n        console.log(\"unsubscribed to\", topics);\n        const newTopics = this.state.topics;\n        topics.forEach((el) => {\n          newTopics.delete(el);\n        });\n        this.setState({ topics: newTopics });\n      } else {\n        console.error(\"unsubscribe fail:\", err);\n      }\n      callback && callback(err);\n    });\n  }\n\n  subscribe(inTopics, callback) {\n    const topics = this.cleanTopics(inTopics);\n    console.log(\"subscribe to\", topics);\n    this.client.subscribe(topics, (err, granted) => {\n      if (!err) {\n        console.log(\"subscribed to\", granted);\n        this.setState({ topics: new Set([...topics, ...this.state.topics]) });\n      } else {\n        console.error(\"subscribe fail:\", err);\n      }\n      callback && callback(err, granted);\n    });\n  }\n\n  disconnect() {\n    this.state.isConnected && this.client.end();\n  }\n\n  connect(opts) {\n    const connectOpts = { ...opts, reconnectPeriod: 5000 };\n    console.log(\"connecting with\", connectOpts);\n    this.client = mqtt.connect(opts.host, connectOpts);\n    this.client.on(\"connect\", () => {\n      console.log(\"connected to\", connectOpts.host);\n      store.storeSet(\"options\", connectOpts);\n      this.setState({ isConnected: this.client.connected, options: connectOpts });\n      this.subscribe(\"pump/# monitor/#\", (err) => {\n        if (!err) {\n          const now = moment().format(\"YYYY/MM/DD HH:mm:ss\");\n          this.client.publish(\"monitor/log\", `Hello, MQTT Monitor is online at ${now}!`);\n        }\n      });\n    });\n    this.client.on(\"disconnect\", () => {\n      console.log(\"disconnect\");\n      this.setState({ isConnected: this.client.connected });\n    });\n    this.client.on(\"reconnect\", () => {\n      console.log(\"reconnect\");\n    });\n    this.client.on(\"offline\", () => {\n      console.log(\"offline\");\n    });\n    this.client.on(\"close\", () => {\n      console.log(\"close\");\n      this.setState({ isConnected: this.client.connected });\n    });\n    this.client.on(\"error\", (err) => {\n      console.log(\"Ooops\", \"Something is wrong!\", err);\n      this.setState({ isConnected: this.client.connected });\n    });\n    this.client.on(\"message\", (topic, message, packet) => {\n      this.setState(\n        {\n          messages: [{ ts: new Date(), topic: topic, message: message.toString() }, ...this.state.messages]\n        },\n        () => {\n          store.storeSet(this.state.options + \"_messages\", this.state.messages);\n          console.log(\"total messages count: \" + this.state.messages.length);\n        }\n      );\n    });\n  }\n\n  checkConnect() {\n    const options = this.state.options;\n    options.host && options.host.startsWith(\"ws\") && this.connect(options);\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\", this.state.options);\n  }\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount\");\n    if (this.state.isConnected) {\n      store.storeSet(\"options\", this.state.options);\n    }\n    store.storeSet(this.state.options + \"_messages\", this.state.messages);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@sweetalert2/theme-bootstrap-4/bootstrap-4.css';\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}